import testUsers from '@webex/test-helper-test-users';
import {expect} from 'chai';

describe('samples', () => {
  describe('browser-single-party-call-with-mute', () => {
    describe('normal dialing', () => {
      let mccoy, spock;

      const browserSpock = browser.select('browserSpock');
      const browserMccoy = browser.select('browserMccoy');

      before('create test users', () => testUsers.create({count: 2})
        .then((users) => {
          [spock, mccoy] = users;
          // Adding pause to let test users propagate through integration
          browser.pause(2500);
        }));

      before('reload browser', () => {
        browser.refresh();
      });

      it('loads the app', () => {
        browser.url('/browser-single-party-call-with-mute');
      });

      it('connects mccoy\'s browser', () => {
        expect(browserMccoy.getTitle()).to.equal('Sample: Local Mute/Unmute');
        browserMccoy.setValue('[placeholder="Your access token"]', mccoy.token.access_token);
        browserMccoy.click('[title="connect"]');
        browserMccoy.waitForExist('.listening');
      });

      it('connects spock\'s browser', () => {
        expect(browserSpock.getTitle()).to.equal('Sample: Local Mute/Unmute');
        browserSpock.setValue('[placeholder="Your access token"]', spock.token.access_token);
        browserSpock.click('[title="connect"]');
        browserSpock.waitForExist('.listening');
      });

      it('places call from spock to mccoy', () => {
        browserSpock.setValue('[placeholder="Person ID or Email Address or SIP URI or Room ID"]', mccoy.emailAddress);
        browserSpock.click('[title="dial"]');

        browserSpock.waitUntil(() => (browserSpock.getText('#call-status-local') === 'IN_MEETING'), 10000, 'Timed-out waiting for local user to connect to meeting');
      });

      it('joins the call on mccoy', () => {
        browserMccoy.waitUntil(() => {
          try {
            const alerttext = browserMccoy.alertText();

            return alerttext === 'Answer incoming call';
          }
          catch (error) {
            // Error is thrown when alert isn't open which is fine
            return false;
          }
        }, 10000, 'Timed out waiting for incoming call alert');
        browserMccoy.alertAccept();
        browserSpock.waitUntil(() => (browserSpock.getText('#call-status-remote') === 'IN_MEETING'), 10000, 'Timed-out waiting for remote user to connect to meeting');
      });

      it('turns the local camera off', () => {
        browserSpock.click('[title="stop sending video"]');
        // Test runs too quickly sometimes and tries to click before call is fully established
        browserSpock.waitUntil(() => (browserSpock.getText('#camera-state') === 'off'), 10000, 'Timed-out waiting for camera state to chage');
      });

      it('turns the local camera back on', () => {
        browserSpock.click('[title="start sending video"]');
        // Test runs too quickly sometimes and tries to click before call is fully established
        browserSpock.waitUntil(() => (browserSpock.getText('#camera-state') === 'on'), 10000, 'Timed-out waiting for camera state to change');
      });

      it('turns sending audio off', () => {
        browserSpock.click('[title="stop sending audio"]');
        // Test runs too quickly sometimes and tries to click before call is fully established
        browserSpock.waitUntil(() => (browserSpock.getText('#microphone-state') === 'off'), 10000, 'Timed-out waiting for microphone state to chage');
      });

      it('turns sending audio on', () => {
        browserSpock.click('[title="start sending audio"]');
        // Test runs too quickly sometimes and tries to click before call is fully established
        browserSpock.waitUntil(() => (browserSpock.getText('#microphone-state') === 'on'), 10000, 'Timed-out waiting for microphone state to chage');
      });

      it('ends the call', () => {
        browserSpock.click('[title="hangup"]');
        browserSpock.waitUntil(() => (browserSpock.getText('#call-status-local') === 'NOT_IN_MEETING'), 10000, 'Timed-out waiting for local user to disconnect from meeting');
      });
    });
  });
});
